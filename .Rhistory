knitr::opts_chunk$set(echo = TRUE)
df[sapply(df,is.character)] <- lapply(df[sapply(df,is.character)],as.factor)
df = read.csv("UserCarData.csv")
dim(df)
View(df)
glimpse(df)
library(tidyverse)
glimpse(df)
df[sapply(df,is.character)] <- lapply(df[sapply(df,is.character)],as.factor)
glimpse(df)
summary(df)
library(tidyverse)
df <- df %>%
group_by(Sales_ID) %>%
mutate(Sold = sum(sold=='Y'))
summary(df)
df[sapply(df,is.character)] <- lapply(df[sapply(df,is.character)],as.factor)
library(tidyverse)
df <- df %>%
group_by(Sales_ID) %>%
mutate(Sold = sum(sold=='Y'))
df <- df[,-18]
summary(df)
df[sapply(df,is.character)] <- lapply(df[sapply(df,is.character)],as.factor)
df[sapply(df,is.character)] <- lapply(df[sapply(df,is.character)],as.factor)
library(tidyverse)
df <- df %>%
group_by(Sales_ID) %>%
mutate(Sold = sum(sold=='Y'))
df = read.csv("UserCarData.csv")
dim(df)
library(tidyverse)
df <- df %>%
group_by(Sales_ID) %>%
mutate(Sold = sum(sold=='Y'))
View(df)
library(tidyverse)
df <- df %>%
group_by(Sales_ID) %>%
mutate(Sold = sum(sold=='Y'))
df <- df[,-18]
summary(df)
df[sapply(df,is.character)] <- lapply(df[sapply(df,is.character)],as.factor)
glimpse(df)
library(tidyverse)
df <- df %>%
group_by(Sales_ID) %>%
mutate(Sold = sum(sold=='Y'))
df = read.csv("UserCarData.csv")
dim(df)
library(tidyverse)
df <- df %>%
group_by(Sales_ID) %>%
mutate(Sold = sum(sold=='Y'))
df <- df[,-18]
summary(df)
df[sapply(df,is.character)] <- lapply(df[sapply(df,is.character)],as.factor)
mean(df$Sold)
glimpse(df)
df$year <- as.factor(df$year)
library(tidyverse)
df <- df %>%
group_by(Sales_ID) %>%
mutate(Sold = sum(sold=='Y'))
df = read.csv("UserCarData.csv")
dim(df)
library(tidyverse)
df <- df %>%
group_by(Sales_ID) %>%
mutate(Sold = sum(sold=='Y'))
df <- df[,-18]
summary(df)
df[sapply(df,is.character)] <- lapply(df[sapply(df,is.character)],as.factor) # Changes all character types to factors for each column
df$year <- as.factor(df$year) # Changes int year to factor year
View(df)
df = read.csv("UserCarData.csv")
dim(df)
library(tidyverse)
df <- df %>%
group_by(Sales_ID) %>%
mutate(Sold = sum(sold=='Y'))
df <- df[,-18]
summary(df)
df[sapply(df,is.character)] <- lapply(df[sapply(df,is.character)],as.factor) # Changes all character types to factors for each column
df$year <- as.factor(df$year) # Changes int year to factor year
glimpse(df)
df <- df %>%
mutate(selling_price = selling_price / 0.01)
df <- df %>%
mutate(selling_price = 0.01 / selling_price)
df <- df %>%
mutate(selling_price = selling_price * 0.01)
df <- df %>%
mutate(selling_price = selling_price * 0.01214)
df = read.csv("UserCarData.csv")
dim(df)
df <- df %>%
mutate(selling_price = selling_price * 82.37)
df = read.csv("UserCarData.csv")
dim(df)
library(tidyverse)
df <- df %>%
group_by(Sales_ID) %>%
mutate(Sold = sum(sold=='Y'))
df <- df[,-18]
summary(df)
df[sapply(df,is.character)] <- lapply(df[sapply(df,is.character)],as.factor) # Changes all character types to factors for each column
df$year <- as.factor(df$year) # Changes int year to factor year
df <- df %>%
mutate(selling_price = selling_price * 0.01)
df <- df %>%
mutate(selling_price = selling_price * 0.01,
km_driven = km_driven * 0.6213712)
knitr::opts_chunk$set(echo = TRUE)
df = read.csv("UserCarData.csv")
dim(df)
library(tidyverse)
df <- df %>%
group_by(Sales_ID) %>%
mutate(Sold = sum(sold=='Y'))
df <- df[,-18]
summary(df)
df[sapply(df,is.character)] <- lapply(df[sapply(df,is.character)],as.factor) # Changes all character types to factors for each column
df$year <- as.factor(df$year) # Changes int year to factor year
df <- df %>%
mutate(selling_price = selling_price * 0.01,
km_driven = km_driven * 0.6213712)
knitr::opts_chunk$set(echo = TRUE)
df = read.csv("UserCarData.csv")
dim(df)
library(tidyverse)
df <- df %>%
group_by(Sales_ID) %>%
mutate(Sold = sum(sold=='Y'))
df <- df[,-18]
summary(df)
df[sapply(df,is.character)] <- lapply(df[sapply(df,is.character)],as.factor) # Changes all character types to factors for each column
df$year <- as.factor(df$year) # Changes int year to factor year
df <- df %>%
mutate(selling_price = selling_price * 0.01,
mi_driven = km_driven * 0.6213712)
df = read.csv("UserCarData.csv")
dim(df)
library(tidyverse)
df <- df %>%
group_by(Sales_ID) %>%
mutate(Sold = sum(sold=='Y'))
df <- df[,-18]
summary(df)
df[sapply(df,is.character)] <- lapply(df[sapply(df,is.character)],as.factor) # Changes all character types to factors for each column
df$year <- as.factor(df$year) # Changes int year to factor year
df <- df %>%
mutate(selling_price = selling_price * 0.01,
mi_driven = km_driven * 0.6213712)
df <- df %>%
mutate(selling_price = selling_price * 0.01,
mi_driven = km_driven * 0.6213712) %>%
select(-c(km_driven))
View(df)
df = read.csv("UserCarData.csv")
dim(df)
library(tidyverse)
df <- df %>%
group_by(Sales_ID) %>%
mutate(Sold = sum(sold=='Y'))
df <- df[,-18]
summary(df)
df[sapply(df,is.character)] <- lapply(df[sapply(df,is.character)],as.factor) # Changes all character types to factors for each column
df$year <- as.factor(df$year) # Changes int year to factor year
df <- df %>%
mutate(selling_price = selling_price * 0.01,
mi_driven = km_driven * 0.6213712) %>%
select(-c(km_driven))
df = read.csv("UserCarData.csv")
dim(df)
library(tidyverse)
df <- df %>%
group_by(Sales_ID) %>%
mutate(Sold = sum(sold=='Y'))
df <- df[,-18]
summary(df)
df[sapply(df,is.character)] <- lapply(df[sapply(df,is.character)],as.factor) # Changes all character types to factors for each column
df$year <- as.factor(df$year) # Changes int year to factor year
df <- df %>%
mutate(selling_price = selling_price * 0.01,
mi_driven = km_driven * 0.6213712)
df = read.csv("UserCarData.csv")
dim(df)
library(tidyverse)
df <- df %>%
group_by(Sales_ID) %>%
mutate(Sold = sum(sold=='Y'))
df <- df[,-18]
summary(df)
df[sapply(df,is.character)] <- lapply(df[sapply(df,is.character)],as.factor) # Changes all character types to factors for each column
df$year <- as.factor(df$year) # Changes int year to factor year
df <- df %>%
mutate(selling_price = selling_price * 0.01,
mi_driven = round(km_driven * 0.6213712)) %>%
select(-c(km_driven))
knitr::opts_chunk$set(echo = TRUE)
df = read.csv("UserCarData.csv")
dim(df)
<<<<<<< HEAD
library(tidyverse)
df <- df %>%
group_by(Sales_ID) %>%
mutate(Sold = sum(sold=='Y'))
df <- df[,-18]
summary(df)
=======
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(caret))
suppressPackageStartupMessages(library(rpart))
suppressPackageStartupMessages(library(doParallel))
df[sapply(df,is.character)] <- lapply(df[sapply(df,is.character)],as.factor) # Changes all character types to factors for each column
df$year <- as.factor(df$year) # Changes int year to factor year
df <- df %>%
mutate(selling_price = selling_price * 0.01,
mi_driven = round(km_driven * 0.6213712)) %>%
select(-c(km_driven,stat.)) # Converts Rubies to Dollars, Converts Km to Miles, and removes the Km column
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(caret))
suppressPackageStartupMessages(library(rpart))
suppressPackageStartupMessages(library(doParallel))
>>>>>>> origin/main
df[sapply(df,is.character)] <- lapply(df[sapply(df,is.character)],as.factor) # Changes all character types to factors for each column
df$year <- as.factor(df$year) # Changes int year to factor year
df <- df %>%
mutate(selling_price = selling_price * 0.01,
mi_driven = round(km_driven * 0.6213712)) %>%
select(-c(km_driven)) # Converts Rubies to Dollars, Converts Km to Miles, and removes the Km column
<<<<<<< HEAD
glimpse(df)
library(ggplot2)
library(gridExtra)
selling_price <- df %>%
grou_by(Sold) %>%
summarise(Avg.Price = mean(selling_price))
library(ggplot2)
library(gridExtra)
selling_price <- df %>%
group_by(Sold) %>%
summarise(Avg.Price = mean(selling_price))
barplot<- ggplot(selling_price, aes(x = as.factor(Sold), y =Avg.Price )) + geom_bar(stat = 'identity') + theme_minimal() + labs(title = 'Price of sold vs. not sold cars', x= 'Not sold (0) vs. Sold (1)' )
###############################################################3
location <- df %>%
group_by(State.or.Province) %>%
summarise(Avg.Price = mean(selling_price))
##################################################################
box <- ggplot(df, aes(x=selling_price)) + geom_histogram() + theme_minimal() + labs(title = 'The distribution of selling prices')
print(grid.arrange(barplot,box, ncol =2))
libray(ggthemes)
library(ggthemes)
box <- ggplot(df, aes(x=selling_price)) + geom_histogram() + theme_wsj() + labs(title = 'The distribution of selling prices')
print(grid.arrange(barplot,box, ncol =2))
location <- df %>%
group_by(State.or.Province) %>%
summarise(Avg.Price = mean(selling_price))
print(grid.arrange(barplot,box, ncol =2))
barplot<- ggplot(selling_price, aes(x = as.factor(Sold), y =Avg.Price )) + geom_bar(stat = 'identity') + theme_wsj() + labs(title = 'Price of sold vs. not sold cars', x= 'Not sold (0) vs. Sold (1)' )
print(grid.arrange(barplot,box, ncol =2))
box <- ggplot(df, aes(x=selling_price)) + geom_histogram() + theme_wsj() + labs(title = 'The distribution of selling prices'); box
box <- ggplot(df, aes(x=selling_price)) + geom_histogram() + theme_wsj() + labs(title = 'Distribution of selling prices'); box
box <- ggplot(df, aes(x=selling_price)) + geom_histogram() + theme_wsj() + labs(title = 'Distribution of Price'); box
box <- ggplot(df, aes(x=selling_price)) + geom_histogram() + theme_wsj() + labs(title = 'Distribution of Price'); box
box <- ggplot(df, aes(x=selling_price)) + geom_histogram() + theme_wsj() + labs(title = 'Distribution of Price'); box
barplot<- ggplot(selling_price, aes(x = as.factor(Sold), y =Avg.Price )) + geom_bar(stat = 'identity') + theme_wsj() + labs(title = 'Price of sold vs. not sold cars', x= 'Not sold (0) vs. Sold (1)' ); barplot
barplot<- ggplot(selling_price, aes(x = as.factor(Sold), y =Avg.Price )) + geom_bar(stat = 'identity') + theme_wsj() + labs(title = 'Price of sold vs. not sold', x= 'Not sold (0) vs. Sold (1)' ); barplot
barplot<- ggplot(selling_price, aes(x = as.factor(Sold), y =Avg.Price )) + geom_bar(stat = 'identity') + theme_wsj() + labs(title = 'Price of sold vs. not sold', x= 'Not sold (0) vs. Sold (1)' ); barplot
barplot<- ggplot(selling_price, aes(x = as.factor(Sold), y =Avg.Price )) + geom_bar(stat = 'identity') + theme_wsj() + labs(title = 'Price of sold vs. not sold', y= 'Price' ); barplot
summary(df)
df %>% tolower(df)
tolower(df)
names(df) <- tolower(names(df))
View(df)
summary(df)
=======
summary(df)
glimpse(df)
df <- df %>%
mutate(selling_price = selling_price * 0.01,
mi_driven = round(km_driven * 0.6213712)) %>%
select(-c(km_driven,State.or.Province,City)) # Converts Rubies to Dollars, Converts Km to Miles, and removes the Km column
df = read.csv("UserCarData.csv")
dim(df)
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(caret))
suppressPackageStartupMessages(library(rpart))
suppressPackageStartupMessages(library(doParallel))
df[sapply(df,is.character)] <- lapply(df[sapply(df,is.character)],as.factor) # Changes all character types to factors for each column
df$year <- as.factor(df$year) # Changes int year to factor year
df <- df %>%
mutate(selling_price = selling_price * 0.01,
mi_driven = round(km_driven * 0.6213712)) %>%
select(-c(km_driven,State.or.Province,City)) # Converts Rubies to Dollars, Converts Km to Miles, and removes the Km column
summary(df)
glimpse(df)
infodensity <- nearZeroVar(df, saveMetrics= TRUE); infodensity
df <- df[,-1]
train.rows <- sample(1:nrow(df), 0.70*nrow(df))
TRAIN <- df[train.rows,]
HOLDOUT <- df[-train.rows,]
fitControl <- trainControl(method = "cv", number = 10, allowParallel = TRUE)
treeGrid <- expand.grid(cp=10^seq(-5,-1,length=25))
TREE <- train(sold~.,data=TRAIN,method='rpart', tuneGrid=treeGrid,trControl=fitControl, preProc = c("center", "scale"))
df <- df %>%
mutate(selling_price = selling_price * 0.01,
mi_driven = round(km_driven * 0.6213712)) %>%
select(-c(km_driven,State.or.Province,City,torque)) # Converts Rubies to Dollars, Converts Km to Miles, and removes the Km column
knitr::opts_chunk$set(echo = TRUE)
df = read.csv("UserCarData.csv")
dim(df)
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(caret))
suppressPackageStartupMessages(library(rpart))
suppressPackageStartupMessages(library(doParallel))
df[sapply(df,is.character)] <- lapply(df[sapply(df,is.character)],as.factor) # Changes all character types to factors for each column
df$year <- as.factor(df$year) # Changes int year to factor year
df <- df %>%
mutate(selling_price = selling_price * 0.01,
mi_driven = round(km_driven * 0.6213712)) %>%
select(-c(km_driven,State.or.Province,City,torque)) # Converts Rubies to Dollars, Converts Km to Miles, and removes the Km column
treeGrid <- expand.grid(cp=10^seq(-5,-1,length=25))
TREE <- train(sold~.,data=TRAIN,method='rpart', tuneGrid=treeGrid,trControl=fitControl, preProc = c("center", "scale"))
df = read.csv("UserCarData.csv")
dim(df)
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(caret))
suppressPackageStartupMessages(library(rpart))
suppressPackageStartupMessages(library(doParallel))
df[sapply(df,is.character)] <- lapply(df[sapply(df,is.character)],as.factor) # Changes all character types to factors for each column
df$year <- as.factor(df$year) # Changes int year to factor year
df <- df %>%
mutate(selling_price = selling_price * 0.01,
mi_driven = round(km_driven * 0.6213712)) %>%
select(-c(km_driven,State.or.Province,City,torque)) # Converts Rubies to Dollars, Converts Km to Miles, and removes the Km column
summary(df)
glimpse(df)
infodensity <- nearZeroVar(df, saveMetrics= TRUE); infodensity
df <- df[,-1]
train.rows <- sample(1:nrow(df), 0.70*nrow(df))
TRAIN <- df[train.rows,]
HOLDOUT <- df[-train.rows,]
fitControl <- trainControl(method = "cv", number = 10, allowParallel = TRUE)
infodensity <- nearZeroVar(df, saveMetrics= TRUE); infodensity
df <- df[,-1]
train.rows <- sample(1:nrow(df), 0.70*nrow(df))
TRAIN <- df[train.rows,]
HOLDOUT <- df[-train.rows,]
fitControl <- trainControl(method = "cv", number = 10, allowParallel = TRUE)
treeGrid <- expand.grid(cp=10^seq(-5,-1,length=25))
TREE <- train(sold~.,data=TRAIN,method='rpart', tuneGrid=treeGrid,trControl=fitControl, preProc = c("center", "scale"))
plot(TREE)
TREE$results[rownames(TREE$bestTune),]
postResample(predict(TREE,newdata=HOLDOUT),HOLDOUT$age)
postResample(predict(TREE,newdata=HOLDOUT),HOLDOUT$sold)
postResample(predict(TREE,newdata=HOLDOUT),HOLDOUT$sold)
knitr::opts_chunk$set(echo = TRUE)
df = read.csv("UserCarData.csv")
dim(df)
suppressPacksoldStartupMesssolds(library(tidyverse))
infodensity <- nearZeroVar(df, saveMetrics= TRUE); infodensity
df <- df[,-1]
train.rows <- sample(1:nrow(df), 0.70*nrow(df))
TRAIN <- df[train.rows,]
HOLDOUT <- df[-train.rows,]
fitControl <- trainControl(method = "cv", number = 10, allowParallel = TRUE)
df <- df[,-1]
train.rows <- sample(1:nrow(df), 0.70*nrow(df))
TRAIN <- df[train.rows,]
HOLDOUT <- df[-train.rows,]
infodensity <- nearZeroVar(df, saveMetrics= TRUE); infodensity
fitControl <- trainControl(method = "cv", number = 10, allowParallel = TRUE)
knitr::opts_chunk$set(echo = TRUE)
df = read.csv("UserCarData.csv")
dim(df)
suppressPacksoldStartupMesssolds(library(tidyverse))
suppressPacksoldStartupMesssolds(library(tidyverse))
knitr::opts_chunk$set(echo = TRUE)
df = read.csv("UserCarData.csv")
dim(df)
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(caret))
suppressPackageStartupMessages(library(rpart))
suppressPackageStartupMessages(library(doParallel))
df[sapply(df,is.character)] <- lapply(df[sapply(df,is.character)],as.factor) # Changes all character types to factors for each column
df$year <- as.factor(df$year) # Changes int year to factor year
df <- df %>%
mutate(selling_price = selling_price * 0.01,
mi_driven = round(km_driven * 0.6213712)) %>%
select(-c(km_driven,State.or.Province,City,torque,)) # Converts Rubies to Dollars, Converts Km to Miles, and removes the Km column
summary(df)
glimpse(df)
df <- df[,-1]
train.rows <- sample(1:nrow(df), 0.70*nrow(df))
TRAIN <- df[train.rows,]
HOLDOUT <- df[-train.rows,]
infodensity <- nearZeroVar(df, saveMetrics= TRUE); infodensity
fitControl <- trainControl(method = "cv", number = 10, allowParallel = TRUE)
GLM <- train(sold ~., data = TRAIN, method = "glm", trControl = fitControl, preProc = c("center","scale"))
GLM$results
postResample(predict(GLM,newdata = HOLDOUT), HOLDOUT$sold)
varImp(GLM)
df <- df %>%
mutate(selling_price = selling_price * 0.01,
mi_driven = round(km_driven * 0.6213712)) %>%
select(-c(km_driven,State.or.Province,City,torque,Region)) # Converts Rubies to Dollars, Converts Km to Miles, and removes the Km column
df = read.csv("UserCarData.csv")
dim(df)
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(caret))
suppressPackageStartupMessages(library(rpart))
suppressPackageStartupMessages(library(doParallel))
df[sapply(df,is.character)] <- lapply(df[sapply(df,is.character)],as.factor) # Changes all character types to factors for each column
df$year <- as.factor(df$year) # Changes int year to factor year
df <- df %>%
mutate(selling_price = selling_price * 0.01,
mi_driven = round(km_driven * 0.6213712)) %>%
select(-c(km_driven,State.or.Province,City,torque,Region)) # Converts Rubies to Dollars, Converts Km to Miles, and removes the Km column
df <- df[,-1]
train.rows <- sample(1:nrow(df), 0.70*nrow(df))
TRAIN <- df[train.rows,]
HOLDOUT <- df[-train.rows,]
infodensity <- nearZeroVar(df, saveMetrics= TRUE); infodensity
fitControl <- trainControl(method = "cv", number = 10, allowParallel = TRUE)
GLM <- train(sold ~., data = TRAIN, method = "glm", trControl = fitControl, preProc = c("center","scale"))
GLM$results
postResample(predict(GLM,newdata = HOLDOUT), HOLDOUT$sold)
varImp(GLM)
glmnetGrid <- expand.grid(alpha = seq(0,1,.05),lambda = 10^seq(-4,-1,length=10))
GLMnet <- train(sold~.,data=TRAIN,method='glmnet', tuneGrid=glmnetGrid, trControl=fitControl, preProc = c("center", "scale"))
plot(GLMnet)
GLMnet$results[rownames(GLMnet$bestTune),]
postResample(predict(GLMnet,newdata=HOLDOUT),HOLDOUT$sold)
varImp(GLMnet)
treeGrid <- expand.grid(cp=10^seq(-5,-1,length=25))
TREE <- train(sold~.,data=TRAIN,method='rpart', tuneGrid=treeGrid,trControl=fitControl, preProc = c("center", "scale"))
plot(TREE)
TREE$results[rownames(TREE$bestTune),]
postResample(predict(TREE,newdata=HOLDOUT),HOLDOUT$sold)
forestGrid <- expand.grid(mtry=c(1,2,3,4,5,6,7,8,9,10,11,12,13))
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
FOREST <- train(sold~.,data=TRAIN,method='rf',tuneGrid=forestGrid, trControl=fitControl, preProc = c("center", "scale"))
stopCluster(cluster)
registerDoSEQ()
plot(FOREST)
FOREST$results[rownames(FOREST$bestTune),]
postResample(predict(FOREST,newdata=HOLDOUT),HOLDOUT$sold)
varImp(FOREST)
svmLinearGrid <- expand.grid(C=2^(1:10) )
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
SVM <- train(sold~.,data=TRAIN,method='svmLinear', trControl=fitControl,tuneGrid = svmLinearGrid, preProc = c("center", "scale"))
svmLinearGrid <- expand.grid(C=2^(1:2) )
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
SVM <- train(sold~.,data=TRAIN,method='svmLinear', trControl=fitControl,tuneGrid = svmLinearGrid, preProc = c("center", "scale"))
stopCluster(cluster)
registerDoSEQ()
plot(SVM)
SVM$results[rownames(SVM$bestTune),]
postResample(predict(SVM,newdata=HOLDOUT),HOLDOUT$sold)
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
knnGrid <- expand.grid(k=1:20)
KNN <- train(sold~.,data=TRAIN, method='knn', trControl=fitControl,tuneGrid=knnGrid,preProc = c("center", "scale"))
stopCluster(cluster)
registerDoSEQ()
plot(KNN)
KNN$results[rownames(KNN$bestTune),]
varImp(KNN)
postResample(predict(KNN, newdata = HOLDOUT), HOLDOUT$sold)
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
knnGrid <- expand.grid(k=1:50)
KNN <- train(sold~.,data=TRAIN, method='knn', trControl=fitControl,tuneGrid=knnGrid,preProc = c("center", "scale"))
stopCluster(cluster)
registerDoSEQ()
plot(KNN)
KNN$results[rownames(KNN$bestTune),]
varImp(KNN)
postResample(predict(KNN, newdata = HOLDOUT), HOLDOUT$sold)
svmPolyGrid <- expand.grid(degree=3:5, scale=10^seq(-4,-1,by=1), C=2^(2:5) )
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
SVMpoly <- train(sold~.,data=TRAIN,method='svmPoly', trControl=fitControl,tuneGrid = svmPolyGrid,preProc = c("center", "scale"))
>>>>>>> origin/main
